{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/SearchForm/SearchForm.module.css","redux/phonebook-actions.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/SearchForm/SearchForm.js","App.js","redux/phonebook-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","nanoid","deleteContact","changeFilter","connect","state","items","filter","contacts","lowerName","toLowerCase","contact","includes","renderContacts","dispatch","phonebookActions","className","s","ContactBox","length","ContactList","map","ContactListItem","ContactListName","contBtn","onClick","class","ContactForm","inputChange","e","currentTarget","value","setState","resetForm","pushContact","preventDefault","props","alert","formList","type","this","onChange","pattern","title","required","formBtn","Component","inputForm","searchForm","htmlFor","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","contactPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.f54d3e21.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactBox\":\"ContactList_ContactBox__13nAk\",\"ContactList\":\"ContactList_ContactList__It4eu\",\"ContactListItem\":\"ContactList_ContactListItem__ZJLPe\",\"ContactListName\":\"ContactList_ContactListName__1YBMY\",\"contBtn\":\"ContactList_contBtn__3oYg3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formList\":\"ContactForm_formList__1f-F3\",\"formBtn\":\"ContactForm_formBtn__1MJug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchForm\":\"SearchForm_searchForm__3J__W\"};","import { nanoid } from \"nanoid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"contact/add\", ({ name, number }) => ({\r\n  payload: {\r\n    id: nanoid(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction(\"contact/delete\");\r\n\r\nconst changeFilter = createAction(\"contact/changeFilter\");\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport propTypes from \"prop-types\";\r\nimport phonebookActions from \"../../redux/phonebook-actions\";\r\nimport s from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => (\r\n  <div className={s.ContactBox}>\r\n    <h2>Contacts: {contacts.length}</h2>\r\n    <ul className={s.ContactList}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.ContactListItem}>\r\n          <p className={s.ContactListName}>\r\n            {name}: {number}\r\n          </p>\r\n          <div>\r\n            <button className={s.contBtn} onClick={() => deleteContact(id)}>\r\n              <span class=\"material-icons md-light\">close</span>\r\n            </button>\r\n          </div>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\n// рендер списка\r\nconst renderContacts = (contacts, filter) => {\r\n  const lowerName = filter.toLowerCase();\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(lowerName)\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  const { filter, contacts } = state.items;\r\n  const visibleContacts = renderContacts(contacts, filter);\r\n  return {\r\n    contacts: visibleContacts,\r\n  };\r\n};\r\n\r\n// const mapStateToProps = ({ items: { contacts, filter } }) => ({\r\n//   items: renderContacts(contacts, filter),\r\n// });\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteContact: (id) => dispatch(phonebookActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  contacts: propTypes.array.isRequired,\r\n  deleteContact: propTypes.func.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport propTypes from \"prop-types\";\r\nimport phonebookActions from \"../../redux/phonebook-actions\";\r\nimport s from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  // добавление значений в state\r\n  inputChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  //   очистка формы\r\n  resetForm = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  // отправка контакта\r\n  pushContact = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (this.state.name !== \"\") {\r\n      this.props.addContact(this.state);\r\n      this.resetForm();\r\n      return;\r\n    }\r\n    alert(\"Please write a name\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={s.formList}>\r\n        <label>\r\n          Name:\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.inputChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          Number:\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n            value={this.state.number}\r\n            onChange={this.inputChange}\r\n          />\r\n        </label>\r\n        <button className={s.formBtn} onClick={this.pushContact}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addContact: ({ name, number }) =>\r\n    dispatch(phonebookActions.addContact({ name, number })),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  addContact: propTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport propTypes from \"prop-types\";\r\nimport phonebookActions from \"../../redux/phonebook-actions\";\r\nimport s from \"./SearchForm.module.css\";\r\n\r\nconst SearchForm = ({ filter, inputForm }) => {\r\n  return (\r\n    <div className={s.searchForm}>\r\n      <label htmlFor=\"\">\r\n        Find contact by name{\" \"}\r\n        <input type=\"text\" name=\"filter\" value={filter} onChange={inputForm} />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: state.items.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  inputForm: (e) =>\r\n    dispatch(phonebookActions.changeFilter(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm);\r\n\r\nSearchForm.propTypes = {\r\n  filter: propTypes.string.isRequired,\r\n  inputForm: propTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\n// import { nanoid } from \"nanoid\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport SearchForm from \"./components/SearchForm/SearchForm\";\n\nconst App = ({ contacts }) => {\n  // state = {\n  // contacts: [],\n  // filter: \"\",\n  // };\n  // построение из localStorage\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem(\"contacts\");\n  //   if (contacts) {\n  //     const parsContacts = JSON.parse(contacts);\n  //     this.setState({ contacts: parsContacts });\n  //   } else {\n  //     return;\n  //   }\n  // }\n  //\n  // componentDidUpdate(prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n  //   }\n  // }\n  // проверка на совпадение\n  // checkContact = (name) => {\n  //   return this.state.contacts.some(\n  //     (contact) => contact.name.toLowerCase() === name.toLowerCase()\n  //   );\n  // };\n\n  // добавление контакта !~\n  // addContact = ({ name, number }) => {\n  //   const contact = {\n  //     id: nanoid(),\n  //     name,\n  //     number,\n  //   };\n  //   if (this.checkContact(name)) {\n  //     alert(`${name} is already in contacts`);\n  //     return;\n  //   } else {\n  //     this.setState(({ contacts }) => ({\n  //       contacts: [contact, ...contacts],\n  //     }));\n  //   }\n  // };\n\n  // удаление контакта !!\n  // deleteContact = (contactId) => {\n  //   this.setState((prevState) => ({\n  //     contacts: prevState.contacts.filter(\n  //       (contact) => contact.id !== contactId\n  //     ),\n  //   }));\n  // };\n\n  // рендер списка !!\n  // renderContacts = () => {\n  //   const lowerName = this.state.filter.toLowerCase();\n  //   return this.state.contacts.filter((contact) =>\n  //     contact.name.toLowerCase().includes(lowerName)\n  //   );\n  // };\n\n  // фильтр !!\n  // changeFilter = (e) => {\n  //   this.setState({ filter: e.currentTarget.value });\n  // };\n\n  // const rendered = this.renderContacts();\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      {/* <ContactForm addContact={this.addContact} /> */}\n      {contacts.length > 1 && <SearchForm />}\n      {/* <SearchForm filter={this.state.filter} inputForm={this.changeFilter} /> */}\n      <ContactList />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: state.items.contacts,\n});\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./phonebook-actions\";\r\n\r\nconst contacts = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => {\r\n    const checkDublicat = state.filter(\r\n      (contact) => payload.name === contact.name\r\n    );\r\n    if (checkDublicat.length) {\r\n      alert(`${payload.name} - present in contacts`);\r\n      return state;\r\n    }\r\n    return [...state, payload];\r\n  },\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport contactsReducer from \"./phonebook-reducer\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst contactPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: \"filter\",\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: { items: persistReducer(contactPersistConfig, contactsReducer) },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}